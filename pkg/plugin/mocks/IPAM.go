// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	specTypes "github.com/containernetworking/cni/pkg/types/040"
	mock "github.com/stretchr/testify/mock"

	types "github.com/containernetworking/cni/pkg/types"
)

// IPAM is an autogenerated mock type for the IPAM type
type IPAM struct {
	mock.Mock
}

// ConfigureIface provides a mock function with given fields: ifName, res
func (_m *IPAM) ConfigureIface(ifName string, res *specTypes.Result) error {
	ret := _m.Called(ifName, res)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *specTypes.Result) error); ok {
		r0 = rf(ifName, res)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecAdd provides a mock function with given fields: _a0, netconf
func (_m *IPAM) ExecAdd(_a0 string, netconf []byte) (types.Result, error) {
	ret := _m.Called(_a0, netconf)

	var r0 types.Result
	if rf, ok := ret.Get(0).(func(string, []byte) types.Result); ok {
		r0 = rf(_a0, netconf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(_a0, netconf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecDel provides a mock function with given fields: _a0, netconf
func (_m *IPAM) ExecDel(_a0 string, netconf []byte) error {
	ret := _m.Called(_a0, netconf)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(_a0, netconf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
